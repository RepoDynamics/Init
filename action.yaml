name: 'RepoDynamics Meta'
description: 'Load repository metadata.'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue


inputs:

  force-update:
      description: |
        One of `none`, `core` or `all` (default: none):
          - none: load entirely from cache, if no changes in metadata files are detected.
          - core: force update the core metadata, but not the cached API metadata.
          - all: force update the core metadata and the cached API metadata.
        Note that when a change is detected, the core metadata is always updated,
        but non-expired cached API metadata is only updated when `all` is selected.
      default: none
      required: false

  checkout-ref:
    description: 'Reference to checkout, i.e. the `ref` input of `actions/checkout`.'
    default: ""
    required: false


outputs:

  meta:
    description: "Repository metadata as a JSON string."
    value: ${{ steps.metadata.outputs.json }}


runs:
  using: "composite"
  steps:

    - name: 'Logo'
      shell: bash
      run: |
        # Intro
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n\n\n"
    

    - name: 'Checkout Repository'
      run: |
        # Checkout Repository
        I="\033[1;94m"      # bold bright-blue text
        echo -e "\n\033[1;30;45m 1. Checkout Repository "
        echo -e "${I}checkout-ref: ${{ inputs.checkout-ref || '' }}"
      shell: bash
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.checkout-ref }}


    - name: 'Setup Python'
      run: |
        # Setup Python
        H="\033[1;30;45m"  
        echo -e "\n${H} 2. Setup Python "
      shell: bash
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'


    - name: 'Install RepoDynamics'
      shell: bash
      run: |
        # Install RepoDynamics
        echo -e "\n\033[1;30;45m 3. Install RepoDynamics "
        GREEN='\033[0;32m'
        if [[ "${{ inputs.force-update }}" == "none" && "${{ steps.cache.outputs.cache-hit }}" == "true" ]]; then
          echo -e "${GREEN}Force-update was not selected and a cache was found; only installing RepoDynamics[meta-summary]."
          pip install repodynamics[meta-summary]
        else
          if [[ "${{ steps.cache.outputs.cache-hit }}" != "true" ]]; then
            echo -e "${GREEN}No cache was found; installing RepoDynamics[meta]."
          else
            echo -e "${GREEN}Force-update was selected; installing RepoDynamics[meta]."
          fi
          pip install repodynamics[meta]
        fi


    - name: 'Initialize Cache'
      run: |
        # Initialize Metadata Cache
        H="\033[1;30;45m" 
        echo -e "\n${H} 4. Initialize Metadata Cache "
      shell: bash
    - id: cache
      # This returns a cache-hit output, which is either 'true' or '' (str, not bool).
      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#using-the-cache-action
      # https://github.com/actions/cache
      uses: actions/cache@v3
      with:
        path: |
          metadata_full.json
          metadata_api_cache.yaml
        # Cache is invalidated when metadata files are changed.
        # Ref. hashFiles: https://docs.github.com/en/actions/learn-github-actions/expressions#hashfiles
        key: metadata-${{hashFiles('meta/*.yaml')}}


    - name: 'Get metadata'
      id: metadata
      env:
        RD__META__CACHE_HIT: ${{ steps.cache.outputs.cache-hit == 'true' }}
        RD__META__FORCE_UPDATE: ${{ inputs.force-update }}
        RD__META__METADATA_FILEPATH: metadata_full.json
        RD__META__CACHE_FILEPATH: metadata_api_cache.yaml
        RD__META__GITHUB_TOKEN: ${{ github.token }}
      run: |
        # Get Metadata
        echo -e "\n\033[1;30;45m 5. Run RepoDynamics Meta "
        python -m repodynamics.actions meta
      shell: bash
