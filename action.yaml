name: 'RepoDynamics Meta'
description: 'Load repository metadata.'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue


inputs:

  force-update:
      description: |
        One of `none`, `core` or `all` (default: none):
          - none: load entirely from cache, if no changes in metadata files are detected.
          - core: force update the core metadata, but not the cached API metadata.
          - all: force update the core metadata and the cached API metadata.
        Note that when a change is detected, the core metadata is always updated,
        but non-expired cached API metadata is only updated when `all` is selected.
      default: none
      required: false

  ref:
    description: |
      Reference (i.e. branch, tag or SHA) of the current repository to checkout, 
      i.e. the `ref` input of `actions/checkout`.
    default: ""
    required: false

  path:
    description: |
      Path to the 'meta' directory in the repository.
    default: "meta"
    required: false


outputs:

  meta:
    description: "Repository metadata as a JSON string."
    value: ${{ steps.metadata.outputs.json }}


runs:
  using: "composite"
  steps:

    - name: 'Display Logo'
      shell: bash
      run: |
        # Intro
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n\n\n"

    - name: 'Setup Python'
      run: |
        
        H="\033[1;30;45m"  
        echo -e "\n${H} 1. Setup Python  "
      shell: bash
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: 'Install RepoDynamics'
      shell: bash
      run: |
        # Install RepoDynamics
        echo -e "\n\033[1;30;45m 2. Install RepoDynamics "
        pip install -r ${{ github.action_path }}/requirements.txt

    - name: 'Checkout Repository'
      shell: bash
      run: |
        # Checkout Repository
        I="\033[1;94m" # bold bright-blue text
        echo -e "\n\033[1;30;45m 1. Checkout Main Repository  "
        echo -e "${I}checkout-ref: ${{ inputs.ref || github.ref }}"
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.ref }}
        sparse-checkout: |
          ${{ inputs.path }}/extensions.json
          ${{ inputs.path }}/data
        sparse-checkout-cone-mode: false
        path: repodynamics/metadata/main
    - shell: bash
      run: |
        # Display Downloaded Files
        I="\033[1;32m" # bold green text
        ref="${{ inputs.ref || github.ref }}"
        echo -e "${I}Following metadata files were downloaded from $ref in the current repository:"
        root_path="repodynamics/metadata/main"
        find "$root_path/${{ inputs.path }}" -type f | while IFS= read -r line; do
            echo -e "\033[0;92m   ${line#$root_path/}"
        done
        echo -e "\n\n"

    


    - name: 'Read Extensions'
      id: ext
      shell: python
      run: |
        # Read Extensions
        print("\n\033[1;30;45m 3. Read Extensions  ")
        import os
        import json
        try:
          with open("repodynamics/metadata/main/${{inputs.path}}/extensions.json") as f:
              extensions = json.load(f)
        except FileNotFoundError:
          print(
            
          )
        print(f"\033[1;94m Extensions: {json.dumps(extensions, indent=4)}")
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print(f"ext={json.dumps(extensions)}", file=f)


    - name: 'Checkout Extension Repositories'
      shell: bash
      run: |
        # Checkout Extension Repositories
        echo -e "\n\033[1;30;45m 4. Checkout Extension Repositories "
    - if: >-
        fromJSON(steps.ext.outputs.ext).alt_1.repository == '' 
        && fromJSON(steps.ext.outputs.ext).alt_2.repository == '' 
        && fromJSON(steps.ext.outputs.ext).alt_3.repository == ''
      shell: bash
      run: |
        # No Extensions
        echo -e "\033[1;32mSKIPPED! No alternative repositories were specified."
    - if: fromJSON(steps.ext.outputs.ext).alt_1.repository != ''
      uses: actions/checkout@v3
      with:
        repository: ${{ fromJSON(steps.ext.outputs.ext).alt_1.repository }}
        ref: ${{ fromJSON(steps.ext.outputs.ext).alt_1.ref }}
        sparse-checkout: ${{ fromJSON(steps.ext.outputs.ext).alt_1.path }}
        sparse-checkout-cone-mode: false
        path: repodynamics/metadata/alt_1
    - if: fromJSON(steps.ext.outputs.ext).alt_1.repository != ''
      shell: bash
      run: |
        # Display Downloaded Files
        I="\033[1;32m" # bold green text
        path="${{ fromJSON(steps.ext.outputs.ext).alt_1.repository }}/${{ fromJSON(steps.ext.outputs.ext).alt_1.ref }}"
        echo -e "${I}Following metadata files were downloaded from $path:"
        root_path="repodynamics/metadata/alt_1"
        find "$root_path/${{ fromJSON(steps.ext.outputs.ext).alt_1.path }}" -type f | while IFS= read -r line; do
            echo -e "\033[0;92m   ${line#$root_path/}"
        done
        echo -e "\n"
    - if: fromJSON(steps.ext.outputs.ext).alt_2.repository != ''
      uses: actions/checkout@v3
      with:
          repository: ${{ fromJSON(steps.ext.outputs.ext).alt_2.repository }}
          ref: ${{ fromJSON(steps.ext.outputs.ext).alt_2.ref }}
          sparse-checkout: ${{ fromJSON(steps.ext.outputs.ext).alt_2.path }}
          sparse-checkout-cone-mode: false
          path: repodynamics/metadata/alt_2
    - if: fromJSON(steps.ext.outputs.ext).alt_2.repository != ''
      shell: bash
      run: |
        # Display Downloaded Files
        I="\033[1;32m" # bold green text
        path="${{ fromJSON(steps.ext.outputs.ext).alt_2.repository }}/${{ fromJSON(steps.ext.outputs.ext).alt_2.ref }}"
        echo -e "${I}Following metadata files were downloaded from $path:"
        root_path="repodynamics/metadata/alt_2"
        find "$root_path/${{ fromJSON(steps.ext.outputs.ext).alt_2.path }}" -type f | while IFS= read -r line; do
            echo -e "\033[0;92m   ${line#$root_path/}"
        done
        echo -e "\n"
    - if: fromJSON(steps.ext.outputs.ext).alt_3.repository != ''
      uses: actions/checkout@v3
      with:
          repository: ${{ fromJSON(steps.ext.outputs.ext).alt_3.repository }}
          ref: ${{ fromJSON(steps.ext.outputs.ext).alt_3.ref }}
          sparse-checkout: ${{ fromJSON(steps.ext.outputs.ext).alt_3.path }}
          sparse-checkout-cone-mode: false
          path: repodynamics/metadata/alt_3
    - if: fromJSON(steps.ext.outputs.ext).alt_3.repository != ''
      shell: bash
      run: |
        # Display Downloaded Files
        I="\033[1;32m" # bold green text
        path="${{ fromJSON(steps.ext.outputs.ext).alt_3.repository }}/${{ fromJSON(steps.ext.outputs.ext).alt_3.ref }}"
        echo -e "${I}Following metadata files were downloaded from $path:"
        root_path="repodynamics/metadata/alt_3"
        find "$root_path/${{ fromJSON(steps.ext.outputs.ext).alt_3.path }}" -type f | while IFS= read -r line; do
            echo -e "\033[0;92m   ${line#$root_path/}"
        done
        echo -e "\n"

    - shell: bash
      run: ls -la

    - shell: bash
      run: find repodynamics

    - name: 'Initialize Cache'
      run: |
        # Initialize Metadata Cache
        H="\033[1;30;45m" 
        echo -e "\n${H} 4. Initialize Metadata Cache "
      shell: bash
    - id: cache
      # This returns a cache-hit output, which is either 'true' or '' (str, not bool).
      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#using-the-cache-action
      # https://github.com/actions/cache
      uses: actions/cache@v3
      with:
        path: |
          metadata_full.json
          metadata_api_cache.yaml
        # Cache is invalidated when metadata files are changed.
        # Ref. hashFiles: https://docs.github.com/en/actions/learn-github-actions/expressions#hashfiles
        key: >-
          metadata-${{
            hashFiles(
              'repodynamics/metadata/main/${{ inputs.path }}/data/*.yaml',
              'repodynamics/metadata/alt_1/${{ fromJSON(steps.ext.outputs.ext).alt_1.path }}/data/*.yaml',
              'repodynamics/metadata/alt_2/${{ fromJSON(steps.ext.outputs.ext).alt_2.path }}/data/*.yaml',
              'repodynamics/metadata/alt_3/${{ fromJSON(steps.ext.outputs.ext).alt_3.path }}/data/*.yaml'
            )
          }}
    - shell: bash
      run: |
        echo "${{ steps.cache.outputs.cache-hit }}"
        ls -la


    - name: 'Install RepoDynamics'
      shell: bash
      run: |
        # Install RepoDynamics
        echo -e "\n\033[1;30;45m 3. Install RepoDynamics "
        GREEN='\033[0;32m'
        if [[ "${{ inputs.force-update }}" == "none" && "${{ steps.cache.outputs.cache-hit }}" == "true" ]]; then
          echo -e "${GREEN}Force-update was not selected and a cache was found; only installing RepoDynamics[meta-summary]."
          pip install repodynamics[meta-summary]
        else
          if [[ "${{ steps.cache.outputs.cache-hit }}" != "true" ]]; then
            echo -e "${GREEN}No cache was found; installing RepoDynamics[meta]."
          else
            echo -e "${GREEN}Force-update was selected; installing RepoDynamics[meta]."
          fi
          pip install repodynamics[meta]
        fi


    - name: 'Get metadata'
      id: metadata
      env:
        RD__META__CACHE_HIT: ${{ steps.cache.outputs.cache-hit == 'true' }}
        RD__META__FORCE_UPDATE: ${{ inputs.force-update }}
        RD__META__GITHUB_TOKEN: ${{ github.token }}
        RD__META__FILEPATH_FULL: metadata_full.json
        RD__META__FILEPATH_CACHE: metadata_api_cache.yaml
        RD__META__DIRPATH_MAIN: 'repodynamics/metadata/main/${{ inputs.path }}'
        RD__META__DIRPATH_ALT1: 'repodynamics/metadata/alt_1/${{ fromJSON(steps.ext.outputs.ext).alt_1.path }}'
        RD__META__DIRPATH_ALT2: 'repodynamics/metadata/alt_2/${{ fromJSON(steps.ext.outputs.ext).alt_2.path }}'
        RD__META__DIRPATH_ALT3: 'repodynamics/metadata/alt_3/${{ fromJSON(steps.ext.outputs.ext).alt_3.path }}'
      shell: bash
      run: |
        # Get Metadata
        echo -e "\n\033[1;30;45m 5. Run RepoDynamics Meta "
        python -m repodynamics.actions meta
