name: 'RepoDynamics ProMan'
description: 'Fully automated repository and project manager for GitHub'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue

inputs:
  admin-token:
    description: A personal access token with administration access to the repository.
    required: false
    default: ""
  zenodo-token:
    description: A Zenodo API token.
    required: false
    default: ""
  zenodo-sandbox-token:
    description: A Zenodo Sandbox API token.
    required: false
    default: ""
#  package-build:
#    required: false
#    default: 'false'
#    description: |
#      Build the package and upload the builds as artifacts.
#  package-lint:
#    required: false
#    default: 'false'
#    description: |
#      Run the linting workflow.
#  package-test:
#    required: false
#    default: 'false'
#    description: |
#      Run the test workflow on package.
#  website-build:
#    required: false
#    default: ""
#    description: |
#      Whether to build the website; either 'true' or 'false'.
#  meta-sync:
#    default: report
#    required: false
#    description: |
#      The action to take when the dynamic files are out of sync with the repository meta content.
#      Selecting 'none' will disable this action.
#  hooks:
#    default: report
#    required: false
#    description: |
#      The action to take when running the workflow hooks.
#      Selecting 'none' will disable this action.
#  website-announcement:
#    required: false
#    default: ""
#    description: |
#      New announcement message to show on the website;
#      supports HTML syntax (don't forget to escape with \).
#      Set to 'null' to remove announcement.
#  website-announcement-description:
#    required: false
#    default: ""
#    description: |
#      Commit description (i.e. without type and title)
#      for the announcement commit and changelog entry.
#  first-major-release:
#    required: false
#    default: 'false'
#    description: |
#      Release the current 0.X.Y version as the first major release.

outputs:
  fail:
    value: ${{ steps.action.outputs.fail }}
    description: Whether the workflow failed.
  web:
    value: ${{ steps.action.outputs.web }}
    description: Configurations for website job.
  lint:
    value: ${{ steps.action.outputs.lint }}
    description: Configurations for lint job.
  test:
    value: ${{ steps.action.outputs.test }}
    description: Configurations for test job.
  build:
    value: ${{ steps.action.outputs.build }}
    description: Configurations for build job.
  publish-testpypi:
    value: ${{ steps.action.outputs.publish-testpypi }}
    description: Configurations for publish-testpypi job.
  publish-pypi:
    value: ${{ steps.action.outputs.publish-pypi }}
    description: Configurations for publish-pypi job.
  publish-anaconda:
    value: ${{ steps.action.outputs.publish-anaconda }}
    description: Configurations for publish-anaconda job.
  release:
    value: ${{ steps.action.outputs.release }}
    description: Configurations for release job.

runs:
  using: composite
  steps:

    - name: Initialization
      shell: bash
      run: |
        # Initialization
        printf "\n$(cat ${{github.action_path}}/docs/media/logo/full.txt)\n\n"
        python "${{ github.action_path }}/action/script/log.py" "1. Initialization"
        python "${{ github.action_path }}/action/script/log.py" "1.1. Repository Checkout"
        python "${{ github.action_path }}/action/script/log.py" "1.1.1. Base Repo"

    - name: Base Repository Checkout
      uses: actions/checkout@v4  # https://github.com/actions/checkout
      with:
        token: ${{ inputs.admin-token || github.token }}
        repository: ${{ github.repository }}
        ref: ${{ github.event.repository.default_branch }}
        fetch-depth: 0
        path: repo_base

    - name: Head Repository Checkout
      shell: bash
      run: |
        # Head Repository Checkout
        python "${{ github.action_path }}/action/script/log.py" "1.1.2. Head Repo"
    - uses: actions/checkout@v4
      with:
        token: ${{ inputs.admin-token || github.token }}
        repository: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name) || github.repository }}
        ref: ${{ (github.event_name == 'pull_request' && github.event.pull_request.head.ref) || github.ref }}
        fetch-depth: 0
        path: repo_head

    - name: Python Setup
      shell: bash
      run: |
        # Python Setup
        python "${{ github.action_path }}/action/script/log.py" "1.2. Python Setup"
        # Copy ProMan requirements file to the workspace so that it can be used by SetupPython for caching
        cp "${{ github.action_path }}/action/requirements.txt" .
    - uses: actions/setup-python@v5
      with:
        python-version: 3.x
        cache: pip
        cache-dependency-path: requirements.txt

    - name: Environment Setup
      shell: bash
      run: |
        # Environment Setup
        python "${{ github.action_path }}/action/script/log.py" "1.3. Environment Setup"
        
        echo "::group::Pip Upgrade"
        python -m pip install --upgrade pip
        echo "::endgroup::"
        
        echo "::group::Requirements Installation"
        python -m pip install -r requirements.txt
        echo "::endgroup::"
        
        echo "::group::Action Installation"
        python -m pip install ${{ github.action_path }}/action
        echo "::endgroup::"
        
        echo "::group::Environment Overview"
        python -m pip list
        echo "::endgroup::"

    - name: Cache Load
      id: cache
      shell: bash
      run: |
        # Cache Load
        python "${{ github.action_path }}/action/script/pathfinder.py"
    - name: Base Cache
      if: ${{ steps.cache.outputs.local_dirpath_base }}
      shell: bash
      run: |
        # Base Cache
        python "${{ github.action_path }}/action/script/log.py" "1.4.${{ steps.cache.outputs.secnum_cache_base }}. Base Cache"
    - if: ${{ steps.cache.outputs.local_dirpath_base }}
      uses: actions/cache@v4
      with:
        path: ${{ steps.cache.outputs.local_dirpath_base }}
        key: branch__${{ github.ref }}__local
    - name: Head Cache
      if: ${{ steps.cache.outputs.local_dirpath_head }}
      shell: bash
      run: |
        # Head Cache
        python "${{ github.action_path }}/action/script/log.py" "1.4.${{ steps.cache.outputs.secnum_cache_head }}. Head Cache"
    - if: ${{ steps.cache.outputs.local_dirpath_head }}
      uses: actions/cache@v4
      with:
        path: ${{ steps.cache.outputs.local_dirpath_head }}
        key: branch__${{ github.ref }}__local
    - name: Pre-Commit Cache
      if: ${{ steps.cache.outputs.pre_commit_config_path_head }}
      shell: bash
      run: |
        # Pre-Commit Cache
        python "${{ github.action_path }}/action/script/log.py" "1.4.${{ steps.cache.outputs.secnum_cache_pre-commit }}. Pre-Commit Cache"
    - if: ${{ steps.cache.outputs.pre_commit_config_path_head }}
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit__${{ env.pythonLocation }}__${{ hashFiles(steps.cache.outputs.pre_commit_config_path_head) }}

    - name: Action
      id: action
      env:
        RD_PROMAN__ADMIN_TOKEN: ${{ inputs.admin-token }}
        RD_PROMAN__ZENODO_TOKEN: ${{ inputs.zenodo-token }}
        RD_PROMAN__ZENODO_SANDBOX_TOKEN: ${{ inputs.zenodo-sandbox-token }}
        RD_PROMAN__GITHUB_CONTEXT: ${{ toJSON(github) }}
        RD_PROMAN__PATH_REPO_BASE: repo_base
        RD_PROMAN__PATH_REPO_HEAD: repo_head
      shell: bash
      run: |
        # Action
        python -m proman
        python "${{ github.action_path }}/action/script/log.py" "3. Finalization"
        python "${{ github.action_path }}/action/script/log.py" "3.1. Report Upload"

    - name: Report Upload
      uses: actions/upload-artifact@v4
      with:
        path: uploads
        name: Workflow Results
