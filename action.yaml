name: 'RepoDynamics Meta'
description: 'Load repository metadata.'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue


inputs:

  force-update:
      description: |
        One of `none`, `core` or `all` (default: none):
          - none: load entirely from cache, if no changes in metadata files are detected.
          - core: force update the core metadata, but not the cached API metadata.
          - all: force update the core metadata and the cached API metadata.
        Note that when a change is detected, the core metadata is always updated,
        but non-expired cached API metadata is only updated when `all` is selected.
      default: none
      required: false

  ref:
    description: |
      Reference (i.e. branch, tag or SHA) of the current repository to checkout, 
      i.e. the `ref` input of `actions/checkout`.
    default: ""
    required: false

  path:
    description: |
      Path to the 'meta' directory in the repository.
    default: "meta"
    required: false


outputs:

  meta:
    description: "Repository metadata as a JSON string."
    value: ${{ steps.metadata.outputs.json }}


runs:
  using: "composite"
  steps:

    - name: 'Intro'
      shell: bash
      run: |
        # Repodynamics Meta
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n\n\n"


    - name: 'Setup Python'
      shell: bash
      run: |
        # Setup Python
        echo -e "\033[1;30;48;2;196;0;255m 1. Setup Python  "
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'


    - name: 'Install RepoDynamics'
      shell: bash
      run: |
        # Install RepoDynamics
        echo -e "\033[1;30;48;2;196;0;255m 2. Install RepoDynamics  "
        pip install -r ${{ github.action_path }}/requirements.txt


    - name: 'Checkout Main Repository'
      shell: bash
      run: |
        # Checkout Main Repository
        rd-print "3. Checkout Main Repository" heading meta
        rd-print "checkout-ref: ${{ inputs.ref || github.ref }}" info
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.ref }}
        sparse-checkout: |
          ${{ inputs.path }}/extensions.json
          ${{ inputs.path }}/data
        sparse-checkout-cone-mode: false
        path: repodynamics/metadata/main
    - id: ext
      shell: bash
      env:
        RD_META_FILES__REPO: ${{ github.repository }}
        RD_META_FILES__REF: ${{ inputs.ref || github.ref }}
        RD_META_FILES__PATH: ${{ inputs.path }}
        RD_META_FILES__PATH_DL: repodynamics/metadata/main
        RD_META_FILES__IS_MAIN: true
      run: |
        # Display Downloaded Files
        repodynamics.actions meta files


    - name: 'Checkout Extension Repositories'
      if: fromJSON(steps.ext.outputs.ext).alt_1.repo != ''
      uses: actions/checkout@v3
      with:
        repository: ${{ fromJSON(steps.ext.outputs.ext).alt_1.repo }}
        ref: ${{ fromJSON(steps.ext.outputs.ext).alt_1.ref }}
        sparse-checkout: ${{ fromJSON(steps.ext.outputs.ext).alt_1.path }}/data
        sparse-checkout-cone-mode: false
        path: repodynamics/metadata/alt_1
    - if: fromJSON(steps.ext.outputs.ext).alt_1.repo != ''
      shell: bash
      env:
        RD_META_FILES__REPOSITORY: ${{ fromJSON(steps.ext.outputs.ext).alt_1.repo }}
        RD_META_FILES__REF: ${{ fromJSON(steps.ext.outputs.ext).alt_1.ref }}
        RD_META_FILES__PATH: ${{ fromJSON(steps.ext.outputs.ext).alt_1.path }}
        RD_META_FILES__PATH_DL: repodynamics/metadata/alt_1
      run: |
        # Display Downloaded Files
        repodynamics.actions meta files

    - if: fromJSON(steps.ext.outputs.ext).alt_2.repo != ''
      uses: actions/checkout@v3
      with:
          repository: ${{ fromJSON(steps.ext.outputs.ext).alt_2.repo }}
          ref: ${{ fromJSON(steps.ext.outputs.ext).alt_2.ref }}
          sparse-checkout: ${{ fromJSON(steps.ext.outputs.ext).alt_2.path }}/data
          sparse-checkout-cone-mode: false
          path: repodynamics/metadata/alt_2
    - if: fromJSON(steps.ext.outputs.ext).alt_2.repo != ''
      shell: bash
      env:
        RD_META_FILES__REPOSITORY: ${{ fromJSON(steps.ext.outputs.ext).alt_2.repo }}
        RD_META_FILES__REF: ${{ fromJSON(steps.ext.outputs.ext).alt_2.ref }}
        RD_META_FILES__PATH: ${{ fromJSON(steps.ext.outputs.ext).alt_2.path }}
        RD_META_FILES__PATH_DL: repodynamics/metadata/alt_2
      run: |
        # Display Downloaded Files
        repodynamics.actions meta files

    - if: fromJSON(steps.ext.outputs.ext).alt_3.repo != ''
      uses: actions/checkout@v3
      with:
          repository: ${{ fromJSON(steps.ext.outputs.ext).alt_3.repo }}
          ref: ${{ fromJSON(steps.ext.outputs.ext).alt_3.ref }}
          sparse-checkout: ${{ fromJSON(steps.ext.outputs.ext).alt_3.path }}/data
          sparse-checkout-cone-mode: false
          path: repodynamics/metadata/alt_3
    - if: fromJSON(steps.ext.outputs.ext).alt_3.repo != ''
      shell: bash
      env:
        RD_META_FILES__REPOSITORY: ${{ fromJSON(steps.ext.outputs.ext).alt_3.repo }}
        RD_META_FILES__REF: ${{ fromJSON(steps.ext.outputs.ext).alt_3.ref }}
        RD_META_FILES__PATH: ${{ fromJSON(steps.ext.outputs.ext).alt_3.path }}
        RD_META_FILES__PATH_DL: repodynamics/metadata/alt_3
      run: |
        # Display Downloaded Files
        repodynamics.actions meta files


    - name: 'Initialize Cache'
      shell: bash
      run: |
        # Initialize Metadata Cache
        rd-print "5. Initialize Metadata Cache" heading meta
    - id: cache
      # This returns a cache-hit output, which is either 'true' or 'false' (str, not bool).
      # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#using-the-cache-action
      # https://github.com/actions/cache
      uses: actions/cache@v3
      with:
        path: |
          metadata_full.json
          metadata_api_cache.yaml
        # Cache is invalidated when metadata files are changed.
        # Ref. hashFiles: https://docs.github.com/en/actions/learn-github-actions/expressions#hashfiles
        key: >-
          metadata-${{
            hashFiles(
              'repodynamics/metadata/main/${{ inputs.path }}/data/*.yaml',
              'repodynamics/metadata/alt_1/${{ fromJSON(steps.ext.outputs.ext).alt_1.path }}/data/*.yaml',
              'repodynamics/metadata/alt_2/${{ fromJSON(steps.ext.outputs.ext).alt_2.path }}/data/*.yaml',
              'repodynamics/metadata/alt_3/${{ fromJSON(steps.ext.outputs.ext).alt_3.path }}/data/*.yaml'
            )
          }}
    

    - name: 'Get metadata'
      id: metadata
      env:
        RD__META__CACHE_HIT: ${{ steps.cache.outputs.cache-hit == 'true' }}
        RD__META__FORCE_UPDATE: ${{ inputs.force-update }}
        RD__META__GITHUB_TOKEN: ${{ github.token }}
        RD__META__FILEPATH_FULL: metadata_full.json
        RD__META__FILEPATH_CACHE: metadata_api_cache.yaml
        RD__META__DIRPATH_MAIN: 'repodynamics/metadata/main/${{ inputs.path }}'
        RD__META__DIRPATH_ALT1: 'repodynamics/metadata/alt_1/${{ fromJSON(steps.ext.outputs.ext).alt_1.path }}'
        RD__META__DIRPATH_ALT2: 'repodynamics/metadata/alt_2/${{ fromJSON(steps.ext.outputs.ext).alt_2.path }}'
        RD__META__DIRPATH_ALT3: 'repodynamics/metadata/alt_3/${{ fromJSON(steps.ext.outputs.ext).alt_3.path }}'
      shell: bash
      run: |
        # Get Metadata
        rd-print "6. Get Metadata" heading meta
        if [[ "${{ inputs.force-update }}" == "none" && "${{ steps.cache.outputs.cache-hit }}" == "true" ]]; then
          rd-print "Force-update was not selected and a cache was found; loading metadata from cache..." info
        else
          if [[ "${{ inputs.force-update }}" != "none" ]]; then
            rd-print "Force-update was selected; installing extra dependencies..." info
          else
            rd-print "No cache was found; installing extra dependencies..." info
          fi
          pip install repodynamics[meta]
          rd-print "Calculating metadata..." info
        fi
        python -m repodynamics.actions meta


    
        


    
