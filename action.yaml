name: 'RepoDynamics Init'
description: 'Initialize workflow runs.'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue


outputs:

  docs:
    description: "Whether to run test workflow on package."
    value: ${{ steps.meta.outputs.docs }}

  package-test:
    description: "Whether to run test workflow on package."
    value: ${{ steps.meta.outputs.package-test }}

  package-lint:
    description: "Whether to run linting workflow."
    value: ${{ steps.meta.outputs.package-lint }}

  hash:
    description: "Latest commit hash after changes are committed."
    value: ${{ steps.meta.outputs.hash }}


runs:
  using: "composite"
  steps:

    - name: 'Initialize'
      shell: bash
      run: |
        # Initialize
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n\n\n"
        python "${{ github.action_path }}/heading.py" "1" "Checkout Repository"

    - name: 'Checkout Repository'
      uses: actions/checkout@v3
      with:
        fetch-depth: ${{ (github.event_name == 'push' && '0') || '2' }}

    - shell: bash
      run: |
        # Setup Environment
        python "${{ github.action_path }}/heading.py" "1" "Setup Environment"
        echo "::group::Load requirements file"
        TMP=".local/repodynamics/requirements.txt"
        mkdir -p "$(dirname "$TMP")"
        cp "${{ github.action_path }}/requirements.txt" "$TMP"
        echo "::endgroup::"

    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        cache: 'pip'
        cache-dependency-path: .local/repodynamics/requirements.txt
    - shell: bash
      run: |
        # Install RepoDynamics
        python "${{ github.action_path }}/heading.py" "2" "Install RepoDynamics"
        echo "::group::Install Dependencies"
        python -m pip install -r .local/repodynamics/requirements.txt
        echo "::endgroup::"
        echo "::group::Display pip environment"
        python -m pip list
        echo "::endgroup::"

    - name: 'Detect Changes'
      if: contains(fromJSON('["push", "pull_request"]'), github.event_name)
      shell: bash
      run: |
        # Detect Changes
        rd-print "h1" "Detect Changes"
    - id: changes
      if: contains(fromJSON('["push", "pull_request"]'), github.event_name)
      uses: tj-actions/changed-files@v37
      with:
        files_yaml: |
          all:
            - '**'
          
          discussion-template:
            - '.github/DISCUSSION_TEMPLATE/*.yaml'
            - '.github/DISCUSSION_TEMPLATE/*.yml'
          
          issue-template:
            - '.github/ISSUE_TEMPLATE/*.yaml'
            - '.github/ISSUE_TEMPLATE/*.yml'
          
          pull-template:
            - '.github/PULL_REQUEST_TEMPLATE.md'
            - '.github/PULL_REQUEST_TEMPLATE/*.yaml'
            - '.github/PULL_REQUEST_TEMPLATE/*.yml'
            - '.github/PULL_REQUEST_TEMPLATE/*.md'
          
          workflow:
            - '.github/workflows/**'
            - '!.github/workflows/**/README.md'
          
          github-config:
            - '.github/*.yaml'
            - '.github/*.yml'
          
          data:
            - 'data/**'
            - '!data/**/README.md'
          
          dev:
            - 'dev/**'
            - '!dev/build/conda/**'
            - '!dev/build/pypi/**'
            - '!dev/**/README.md'
          
          dev-build-conda:
            - 'dev/build/conda/**'
            - '!dev/build/conda/**/README.md'
          
          dev-build-pypi:
            - 'dev/build/pypi/**'
            - '!dev/build/pypi/**/README.md'
          
          docs:
            - 'docs/**'
            - '!docs/website/**'
            - '!docs/articles/**'
            - '!docs/**/README.md'
          
          docs-articles:
            - 'docs/articles/**'
            - '!docs/articles/**/README.md'
          
          docs-website:
            - 'docs/website/**'
            - '!docs/website/**/README.md'
          
          meta:
            - 'meta/**'
            - '!meta/**/README.md'
          meta-out:
            - 'meta/.out/**'
            - '!meta/.out/**/README.md'
          meta-data:
            - 'meta/data/**'
            - '!meta/data/**/README.md'
          meta-media:
            - 'meta/media/**'
            - '!meta/media/**/README.md'
          meta-template-health-file:
            - 'meta/template/health_file/**'
            - '!meta/template/health_file/**/README.md'
          meta-template-license:
            - 'meta/template/license/**'
            - '!meta/template/license/**/README.md'
          meta-template-issue-form:
              - 'meta/template/issue_form/**'
              - '!meta/template/issue_form/**/README.md'
          
          src:
            - 'src/**'
            - '!src/**/*README.md'
          
          tests:
            - 'tests/**'
            - '!**/*README.md'
          
          setup-files:
            - 'pyproject.toml'
            - 'setup.py'
            - 'MANIFEST.in'
            - 'dev/build/pypi/readme_pypi.md'
            - 'requirements.txt'
          
          license:
            - 'LICENSE'
          
          health-files:
            - 'CODE_OF_CONDUCT.md'
            - 'CODEOWNERS'
            - 'CONTRIBUTING.md'
            - 'GOVERNANCE.md'
            - 'SECURITY.md'
            - 'SUPPORT.md'
            - '.github/CODE_OF_CONDUCT.md'
            - '.github/CODEOWNERS'
            - '.github/CONTRIBUTING.md'
            - '.github/GOVERNANCE.md'
            - '.github/SECURITY.md'
            - '.github/SUPPORT.md'
            - 'docs/CODE_OF_CONDUCT.md'
            - 'docs/CODEOWNERS'
            - 'docs/CONTRIBUTING.md'
            - 'docs/GOVERNANCE.md'
            - 'docs/SECURITY.md'
            - 'docs/SUPPORT.md'
          
          readme-files:
            - '**/*README.md'
          
          git-files:
            - '.gitignore'
            - '.gitattributes'

    - name: 'Run'
      id: meta
      env:
        RD_INIT__CONTEXT: ${{ toJson(github) }}
        RD_INIT__CHANGES: ${{ toJson(steps.changes.outputs) }}
      shell: bash
      run: |
        # Run Action
        rd-print "h1" "Run Action"
        python -m repodynamics.actions init

    - name: 'Pull'
      if: steps.meta.outputs.pull == 'true'
      id: pull
      uses: peter-evans/create-pull-request@v5
      # https://github.com/marketplace/actions/create-pull-request
      with:
        committer: 'RepoDynamics-Meta[bot] <action_meta@repodynamics.org>'
        branch: 'maint/meta'
        branch-suffix: timestamp
        title: 'chore: sync dynamic files and reinforce hooks'
        body-path: .local/temp/repodynamics/init/pr_body.md

#    - name: 'Create Summary'
#      id: final
#      env:
#        RD_INIT__CONTEXT: ${{ toJson(github) }}
#        RD_INIT__CHANGES: ${{ toJson(steps.changes.outputs) }}
#        RD_INIT__META: ${{ toJson(steps.meta.outputs) }}
#        RD_INIT__HOOKS: ${{ toJson(steps.hooks.outputs) }}
#        RD_INIT__PULL: ${{ toJson(steps.pull.outputs) }}
#      shell: bash
#      run: |
#        # Create Summary
#        rd-print "Finalize" heading init
#        python -m repodynamics.actions init finalize

    - name: 'Run Context'
      uses: repodynamics/context@main
      with:
        steps: true