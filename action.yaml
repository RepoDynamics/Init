name: 'RepoDynamics Init'
description: 'Initialize workflow runs.'
author: 'Armin Ariamajd'
branding:
  icon: file-text
  color: blue

inputs:

  template:
    description: |
      Name of the template used for the repository.
      Available templates: PyPackIT
    required: true
  admin-token:
    description: A personal access token with administration access to the repository.
    required: false
    default: ""
  package-build:
    required: false
    default: 'false'
    description: |
      Build the package and upload the builds as artifacts.
  package-lint:
    required: false
    default: 'false'
    description: |
      Run the linting workflow.
  package-test:
    required: false
    default: 'false'
    description: |
      Run the test workflow on package.
  website-build:
    required: false
    default: ""
    description: |
      Whether to build the website; either 'true' or 'false'.
  meta-sync:
    default: report
    required: false
    description: |
      The action to take when the dynamic files are out of sync with the repository meta content.
      Selecting 'none' will disable this action.
  hooks:
    default: report
    required: false
    description: |
      The action to take when running the workflow hooks.
      Selecting 'none' will disable this action.
  website-announcement:
    required: false
    default: ""
    description: |
      New announcement message to show on the website; 
      supports HTML syntax (don't forget to escape with \).
      Set to 'null' to remove announcement.
  website-announcement-description:
    required: false
    default: ""
    description: |
      Commit description (i.e. without type and title) 
      for the announcement commit and changelog entry.

outputs:

  config:
    description: Configurations for subsequent workflow jobs.
    value: ${{ steps.meta.outputs.config }}

  metadata-ci:
    description: Metadata for subsequent workflow jobs.
    value: ${{ steps.meta.outputs.metadata-ci }}


runs:
  using: "composite"
  steps:

    - name: 'Initialize'
      shell: bash
      run: |
        # Initialize
        printf "\n\n$(cat ${{github.action_path}}/logo.txt)\n\n\n"
        python "${{ github.action_path }}/heading.py" "1" "Checkout Repository"

    - name: 'Checkout Repository'
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        ref: ${{ github.event.repository.default_branch }}
#        ref: >-
#          ${{
#            (
#              github.event_name == 'pull_request' && (
#                (
#                  github.event.pull_request.head.repo.full_name == github.repository
#                  && github.event.pull_request.head.ref
#                ) ||
#              )
#              && github.event.pull_request.head.ref
#            ) || github.ref
#          }}
        fetch-depth: 0
        path: repo_self

    - name: 'Checkout Fork Repository'
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository
      uses: actions/checkout@v3
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0
        path: repo_fork

    - id: setup_env
      shell: bash
      run: |
        # Setup Environment
        python "${{ github.action_path }}/heading.py" "1" "Setup Environment"
        echo "::group::Load requirements file"
        cp "${{ github.action_path }}/requirements.txt" .
        echo "::endgroup::"
        echo "::group::Display working directory"
        pwd
        ls -a
        echo "::endgroup::"

    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        cache: 'pip'
        cache-dependency-path: requirements.txt

    - shell: bash
      run: |
        # Install RepoDynamics
        python "${{ github.action_path }}/heading.py" "2" "Install RepoDynamics"
        echo "::group::Install Dependencies"
        python -m pip install -r requirements.txt
        echo "::endgroup::"
        echo "::group::Display pip environment"
        python -m pip list
        echo "::endgroup::"
        rd-print "h2" "Load Cache"

    - uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: >-
          pre-commit-3
            -${{ env.pythonLocation }}
            -${{ 
              hashFiles(
                'repo_self/.github/.pre-commit-config.yaml', 
                'requirements.txt'
              ) 
            }}

    - name: 'Run'
      id: meta
      env:
        RD_INIT__TEMPLATE: ${{ inputs.template }}
        RD_INIT__CONTEXT: ${{ toJson(github) }}
        RD_INIT__ADMIN_TOKEN: ${{ inputs.admin-token }}
        RD_INIT__PACKAGE_BUILD: ${{ inputs.package-build }}
        RD_INIT__PACKAGE_LINT: ${{ inputs.package-lint }}
        RD_INIT__PACKAGE_TEST: ${{ inputs.package-test }}
        RD_INIT__WEBSITE_BUILD: ${{ inputs.website-build }}
        RD_INIT__META_SYNC: ${{ inputs.meta-sync }}
        RD_INIT__HOOKS: ${{ inputs.hooks }}
        RD_INIT__WEBSITE_ANNOUNCEMENT: ${{ inputs.website-announcement }}
        RD_INIT__WEBSITE_ANNOUNCEMENT_MSG: ${{ inputs.website-announcement-description }}
        RD_INIT__PATH_ROOT_SELF: repo_self
        RD_INIT__PATH_ROOT_FORK: repo_fork
      shell: bash
      run: |
        # Run Action
        rd-print "h1" "Initialize RepoDynamics"
        python -m repodynamics.actions init

    - name: 'Upload log as artifact'
      uses: actions/upload-artifact@v3
      with:
        path: repodynamics
        name: Workflow Details
